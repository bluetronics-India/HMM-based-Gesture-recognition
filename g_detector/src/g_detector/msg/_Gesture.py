"""autogenerated by genmsg_py from Gesture.msg. Do not edit."""
import roslib.message
import struct

import g_detector.msg

class Gesture(roslib.message.Message):
  _md5sum = "bb80121350d542d4d689c261e0480250"
  _type = "g_detector/Gesture"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """featureVector[] f_vec
================================================================================
MSG: g_detector/featureVector
float32 l_h_distance
float32 l_e_distance
float32 r_h_distance
float32 r_e_distance
float32 l_h_direction
float32 l_e_direction
float32 r_h_direction
float32 r_e_direction
"""
  __slots__ = ['f_vec']
  _slot_types = ['g_detector/featureVector[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       f_vec
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Gesture, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.f_vec is None:
        self.f_vec = []
    else:
      self.f_vec = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.f_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.f_vec:
        _x = val1
        buff.write(_struct_8f.pack(_x.l_h_distance, _x.l_e_distance, _x.r_h_distance, _x.r_e_distance, _x.l_h_direction, _x.l_e_direction, _x.r_h_direction, _x.r_e_direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.f_vec = []
      for i in range(0, length):
        val1 = g_detector.msg.featureVector()
        _x = val1
        start = end
        end += 32
        (_x.l_h_distance, _x.l_e_distance, _x.r_h_distance, _x.r_e_distance, _x.l_h_direction, _x.l_e_direction, _x.r_h_direction, _x.r_e_direction,) = _struct_8f.unpack(str[start:end])
        self.f_vec.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.f_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.f_vec:
        _x = val1
        buff.write(_struct_8f.pack(_x.l_h_distance, _x.l_e_distance, _x.r_h_distance, _x.r_e_distance, _x.l_h_direction, _x.l_e_direction, _x.r_h_direction, _x.r_e_direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.f_vec = []
      for i in range(0, length):
        val1 = g_detector.msg.featureVector()
        _x = val1
        start = end
        end += 32
        (_x.l_h_distance, _x.l_e_distance, _x.r_h_distance, _x.r_e_distance, _x.l_h_direction, _x.l_e_direction, _x.r_h_direction, _x.r_e_direction,) = _struct_8f.unpack(str[start:end])
        self.f_vec.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_8f = struct.Struct("<8f")
